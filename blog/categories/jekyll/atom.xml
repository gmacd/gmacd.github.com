<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jekyll | Graham MacDonald]]></title>
  <link href="http://gmacd.github.io/blog/categories/jekyll/atom.xml" rel="self"/>
  <link href="http://gmacd.github.io/"/>
  <updated>2013-11-17T08:57:29+00:00</updated>
  <id>http://gmacd.github.io/</id>
  <author>
    <name><![CDATA[Graham MacDonald]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ChanChan]]></title>
    <link href="http://gmacd.github.io/blog/2013/07/07/chanchan/"/>
    <updated>2013-07-07T00:00:00+01:00</updated>
    <id>http://gmacd.github.io/blog/2013/07/07/chanchan</id>
    <content type="html"><![CDATA[<p>I just spent the last 30 mins trying to get the Clojure code below to be nicely syntax highlighted in Jekyll. It turned out to require me to use the tag <code>highlight clojure</code> to mark the code to be highlighted.  Once that was done, it would silently fail to colour the text until I copied a css file for syntax highlighting that I had to download from somewhere, and put it in one of the several locations in my Jekyll/blog folder.</p>

<p>Not really the end of the world, but actually a bit comforting, since I decided to write my own static blog generator yesterday.</p>

<p>It&rsquo;s called ChanChan, named after my daughter&rsquo;s toy rabbit, because why not?  It&rsquo;s written in Clojure, because, again, why not?  Actually, there&rsquo;s more reason than that &ndash; I rather like Clojure, don&rsquo;t use it at work, and was looking for something to write with it.</p>

<p>It&rsquo;s very early days, but I plan on keeping a journal of the development here.  Currently, it assumes all posts are written in Markdown, and in the folder <code>assets/posts</code>.  It picks up all the <code>.md</code> files in that folder, converts them to html, and writes them to <code>site/posts</code>.</p>

<p>The code for this release can be found on <a href="https://github.com/gmacd/chanchan/releases/tag/0.1">github</a>, or you can see the the code in its entirity below.</p>

<p><div>
  <pre><code class='clojure'>&lt;/p&gt;

&lt;p&gt;(ns blog.core
  [:require [clojure.java.io :as jio]]
  [:use [markdown.core :only [md-to-html-string]]]
  [:use [hiccup core page]])&lt;/p&gt;

&lt;p&gt;(def src-posts-path &amp;ldquo;assets/posts&amp;rdquo;)
(def dest-posts-path &amp;ldquo;site/posts&amp;rdquo;)&lt;/p&gt;

&lt;p&gt;(defn html-post [title body]
  (html5 [:head&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;      [:link {:rel &quot;stylesheet&quot; :type &quot;text/css&quot; :href &quot;../bootstrap/css/bootstrap.css&quot;}]
      [:title title]]
     [:body body]))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(defn files-with-extension [src ext]
  &amp;ldquo;Return all files in src with the extension ext.  E.g. &amp;lsquo;.md&amp;rsquo;&amp;rdquo;
  (&amp;ndash;&gt;&gt; (jio/file src)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   (file-seq)
   (filter #(.endsWith (.getName %) ext))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(defn with-ext [path ext]
  &amp;ldquo;Return a new file with the extension added or replaced with &amp;lsquo;ext&amp;rsquo;&amp;rdquo;
  (let [period-idx (.lastIndexOf path &amp;ldquo;.&amp;rdquo;)]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(if (not= period-idx -1)
  (str (.substring path 0 period-idx) &quot;.&quot; ext)
  (str path &quot;.&quot; ext))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(defn convert-md-file [src dest]
  (let [md-contents (slurp src)]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(-&amp;gt;&amp;gt; md-contents
     (md-to-html-string)
     (html-post &quot;post?&quot;)
     (spit dest))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(defn convert-all-md-files [src-path dest-path]
  (let [src (jio/file src-path)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    dest (jio/file dest-path)
    md-files (files-with-extension src-path &quot;.md&quot;)]
(doseq [md-file md-files]
  (let [dest-path (str dest-path &quot;/&quot; (with-ext (.getName md-file) &quot;html&quot;))]
    (convert-md-file md-file dest-path)))))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(defn -main [&amp;amp; args]
  ; Bit of a hack to create the folder &amp;ndash; better way?
  (jio/make-parents (str dest-posts-path &amp;ldquo;/x&amp;rdquo;))
  (convert-all-md-files src-posts-path dest-posts-path))&lt;/p&gt;

&lt;p&gt;</code></pre>
</div>
</p>
]]></content>
  </entry>
  
</feed>
